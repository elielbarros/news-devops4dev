# CAMPOS OBRIGATORIOS DO ARQUIVO apiVersion, kind, metadata, spec
# Objeto Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgre
spec: # Guarda toda especificação do deployment. Aqui fica o template do POD
  selector: # Qual vai ser a regra pra selecionar o POD
    matchLabels: # A Label que deve ser congruente
      app: postgre # Quando declarar o POD do projeto, tem que ser com esse mesmo nome
  template: # Qual a estrutura que o POD vai gerenciar, qual vai ser o template. Nao precisa declarar o ReplicaSet, o Deployment ja faz o gerenciamento do ReplicaSet
    metadata:
      # Nao podemos nomear o POD utilizando o name, pois ele serah gerenciado dinamicamente pelo ReplicaSet
      # Porem é necessário que os labels do POD batam com o nome definido em spec
      labels:
        app: postgre
        # Agora vamos declarar os Containers que estarao em execução dentro do POD
    spec:
      containers:
        - name: postgre
          image: postgres:15.0
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              value: "newsuser"
            - name: POSTGRES_PASSWORD
              value: "newspwd"
            - name: POSTGRES_DB
              value: "news"
---
apiVersion: v1
kind: Service
metadata:
  name: postgre
spec:
  selector:
    app: postgre
  ports:
    - port: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
spec:
  # Define quantas replicas terao da aplicacao web
  # replicas: 10
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
        - name: web
          image: elielbs/devops4devs-news:v5
          ports:
            - containerPort: 8080
          env:
            - name: DB_DATABASE
              value: "news"
            - name: DB_USERNAME
              value: "newsuser"
            - name: DB_PASSWORD
              value: "newspwd"
            - name: DB_HOST
              value: postgre # Seria o host como localhost, mas utilizamos o nome do service postgre que o kubernetes resolve a comunicação
            - name: AWS_ACCESS_KEY
              value: "AKIAVRUVT6GBUQVCNZM7"
            - name: AWS_ACCESS_SECRET
              value: "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"
#            - name: AWS_REGION
#              value:
            - name: AWS_S3_BUCKET_NAME
              value: study-news-files
            - name: STORAGE_TYPE
              value: S3
---
apiVersion: v1
kind: Service
metadata:
  name: web
spec:
  selector:
    app: web
  ports:
    - port: 80
      targetPort: 8080
      nodePort: 30000
  type: NodePort